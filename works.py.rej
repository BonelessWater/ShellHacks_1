diff a/works.py b/works.py	(rejected hunks)
@@ -18,20 +18,24 @@ Exit codes:
  3 = no usable models or generation failed for all keys
 """
 
+import logging
 import os
 import sys
-import logging
 from typing import List
+
 from dotenv import load_dotenv
 
-logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
+logging.basicConfig(
+    level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s"
+)
 log = logging.getLogger("test_gemini_keys")
 
 PREFERRED_MODELS = [
     "models/gemini-2.5-flash",  # fast/cheaper
-    "models/gemini-2.5-pro",    # stronger
+    "models/gemini-2.5-pro",  # stronger
 ]
 
+
 def _parse_version(v: str) -> List[int]:
     parts = []
     for p in v.split("."):
@@ -41,6 +45,7 @@ def _parse_version(v: str) -> List[int]:
             break
     return parts or [0, 0, 0]
 
+
 def _gather_keys() -> List[str]:
     load_dotenv()
     keys: List[str] = []
@@ -60,6 +65,7 @@ def _gather_keys() -> List[str]:
 
     return keys
 
+
 def try_key_detailed(api_key: str) -> dict:
     """Enhanced version that returns detailed results instead of just True/False"""
     result = {
@@ -70,22 +76,26 @@ def try_key_detailed(api_key: str) -> dict:
         "generation_response": "",
         "error_type": None,
         "error_message": "",
-        "recommendations": []
+        "recommendations": [],
     }
-    
+
     try:
         import google.generativeai as genai
     except Exception as e:
         result["error_type"] = "import_error"
         result["error_message"] = str(e)
-        result["recommendations"].append("Install google-generativeai: poetry add google-generativeai@latest")
+        result["recommendations"].append(
+            "Install google-generativeai: poetry add google-generativeai@latest"
+        )
         return result
 
     # Version check
     sdk_ver = getattr(genai, "__version__", "unknown")
     result["sdk_version"] = sdk_ver
     if _parse_version(sdk_ver) < [0, 7, 0]:
-        result["recommendations"].append("Update SDK: poetry add google-generativeai@latest")
+        result["recommendations"].append(
+            "Update SDK: poetry add google-generativeai@latest"
+        )
 
     # Configure client
     try:
@@ -103,18 +113,20 @@ def try_key_detailed(api_key: str) -> dict:
             methods = getattr(m, "supported_generation_methods", []) or []
             if "generateContent" in methods:
                 usable.append(m.name)
-        
+
         result["models_found"] = usable
         if not usable:
             result["error_type"] = "no_models"
             result["error_message"] = "No models with generateContent found"
-            result["recommendations"].extend([
-                "Check if using correct API (consumer vs Vertex)",
-                "Verify account has access to Gemini models",
-                "Check for org/billing restrictions"
-            ])
+            result["recommendations"].extend(
+                [
+                    "Check if using correct API (consumer vs Vertex)",
+                    "Verify account has access to Gemini models",
+                    "Check for org/billing restrictions",
+                ]
+            )
             return result
-            
+
     except Exception as e:
         result["error_type"] = "list_models_error"
         result["error_message"] = str(e)
@@ -130,71 +142,84 @@ def try_key_detailed(api_key: str) -> dict:
         test_prompt = "Who do you think was the best US president and why? Give a brief 2-3 sentence answer."
         resp = model.generate_content(test_prompt)
         text = getattr(resp, "text", "") or ""
-        
+
         result["generation_worked"] = True
         result["generation_response"] = text.strip()
         result["success"] = True
         result["test_prompt"] = test_prompt
-        
+
     except Exception as e:
         result["error_type"] = "generation_error"
         result["error_message"] = str(e)
-        
+
         if "500" in str(e) or "Internal error" in str(e):
-            result["recommendations"].extend([
-                "Google API temporary issue - retry later",
-                "Check API quota/billing status",
-                "Try different model name"
-            ])
+            result["recommendations"].extend(
+                [
+                    "Google API temporary issue - retry later",
+                    "Check API quota/billing status",
+                    "Try different model name",
+                ]
+            )
         elif "PermissionDenied" in str(e):
             result["recommendations"].append("Check API key permissions and billing")
         elif "NotFound" in str(e):
             result["recommendations"].append("Use a model from the available list")
         elif "v1beta" in str(e):
-            result["recommendations"].append("Update SDK to fix v1beta model name issues")
-    
+            result["recommendations"].append(
+                "Update SDK to fix v1beta model name issues"
+            )
+
     return result
+
+
 def try_key(api_key: str) -> bool:
     """Original try_key function for backward compatibility"""
     detailed_result = try_key_detailed(api_key)
-    
+
     # Log detailed information
     log.info(f"SDK version: {detailed_result['sdk_version']}")
-    
+
     if detailed_result["error_type"]:
         log.error(f"Error type: {detailed_result['error_type']}")
         log.error(f"Error: {detailed_result['error_message']}")
         for rec in detailed_result["recommendations"]:
             log.warning(f"üí° {rec}")
         return False
-    
+
     if detailed_result["models_found"]:
         log.info("Models supporting generateContent (first few):")
         for name in detailed_result["models_found"][:8]:
             log.info(f"  - {name}")
-    
+
     if detailed_result["generation_worked"]:
         log.info(f"Test prompt: {detailed_result.get('test_prompt', 'N/A')}")
         log.info(f"Generation OK. Reply: {detailed_result['generation_response']!r}")
         print("\n‚úÖ SUCCESS: This API key works and generation succeeded.")
         return True
-    
+
     return False
 
+
 def test_all_keys_systematically() -> dict:
     """Test all keys systematically and return detailed results"""
     keys = _gather_keys()
     if not keys:
-        log.error("‚ùå No API keys found. Add GOOGLE_API_KEY and/or GOOGLE_API_KEY_0..9 to your .env.")
+        log.error(
+            "‚ùå No API keys found. Add GOOGLE_API_KEY and/or GOOGLE_API_KEY_0..9 to your .env."
+        )
         return {"status": "no_keys", "exit_code": 1, "results": []}
 
     results = []
     working_keys = 0
-    
+
     for idx, key in enumerate(keys):
-        key_name = "GOOGLE_API_KEY" if idx == 0 else f"GOOGLE_API_KEY_{idx-1 if idx > 0 else idx}"
+        key_name = (
+            "GOOGLE_API_KEY"
+            if idx == 0
+            else f"GOOGLE_API_KEY_{idx-1 if idx > 0 else idx}"
+        )
         log.info(f"--- Testing {key_name} (key #{idx}) ---")
-        
+
         key_result = {
             "key_name": key_name,
             "key_index": idx,
@@ -203,52 +228,64 @@ def test_all_keys_systematically() -> dict:
             "error": None,
             "models_available": [],
             "generation_test": False,
-        "generation_response": "",
-        "test_prompt": ""
+            "generation_response": "",
+            "test_prompt": "",
         }
-        
+
         try:
             detailed_result = try_key_detailed(key)
-            key_result.update({
-                "status": "success" if detailed_result["success"] else "failed",
-                "error": detailed_result["error_message"] if detailed_result["error_type"] else None,
-                "error_type": detailed_result["error_type"],
-                "models_available": detailed_result["models_found"],
-                "generation_test": detailed_result["generation_worked"],
-                "generation_response": detailed_result["generation_response"],
-                "sdk_version": detailed_result["sdk_version"],
-                "recommendations": detailed_result["recommendations"]
-            })
-            
+            key_result.update(
+                {
+                    "status": "success" if detailed_result["success"] else "failed",
+                    "error": (
+                        detailed_result["error_message"]
+                        if detailed_result["error_type"]
+                        else None
+                    ),
+                    "error_type": detailed_result["error_type"],
+                    "models_available": detailed_result["models_found"],
+                    "generation_test": detailed_result["generation_worked"],
+                    "generation_response": detailed_result["generation_response"],
+                    "sdk_version": detailed_result["sdk_version"],
+                    "recommendations": detailed_result["recommendations"],
+                }
+            )
+
             if detailed_result["success"]:
                 working_keys += 1
                 log.info(f"‚úÖ {key_name} WORKS")
                 log.info(f"   üìù Prompt: {detailed_result.get('test_prompt', 'N/A')}")
-                log.info(f"   ü§ñ Response: {detailed_result['generation_response'][:100]}{'...' if len(detailed_result['generation_response']) > 100 else ''}")
+                log.info(
+                    f"   ü§ñ Response: {detailed_result['generation_response'][:100]}{'...' if len(detailed_result['generation_response']) > 100 else ''}"
+                )
             else:
-                log.error(f"‚ùå {key_name} FAILED - {detailed_result['error_type']}: {detailed_result['error_message']}")
+                log.error(
+                    f"‚ùå {key_name} FAILED - {detailed_result['error_type']}: {detailed_result['error_message']}"
+                )
                 for rec in detailed_result["recommendations"]:
                     log.warning(f"   üí° {rec}")
         except Exception as e:
             key_result["status"] = "error"
             key_result["error"] = str(e)
             log.error(f"‚ùå {key_name} ERROR: {e}")
-        
+
         results.append(key_result)
         log.info("-" * 50)
-    
+
     # Summary
     total_keys = len(keys)
     failed_keys = total_keys - working_keys
-    
+
     summary = {
         "total_keys_found": total_keys,
         "working_keys": working_keys,
         "failed_keys": failed_keys,
-        "success_rate": f"{(working_keys/total_keys)*100:.1f}%" if total_keys > 0 else "0%",
-        "overall_status": "success" if working_keys > 0 else "all_failed"
+        "success_rate": (
+            f"{(working_keys/total_keys)*100:.1f}%" if total_keys > 0 else "0%"
+        ),
+        "overall_status": "success" if working_keys > 0 else "all_failed",
     }
-    
+
     log.info("=" * 60)
     log.info("üîç SYSTEMATIC TEST SUMMARY")
     log.info("=" * 60)
@@ -256,35 +293,38 @@ def test_all_keys_systematically() -> dict:
     log.info(f"‚úÖ Working keys: {working_keys}")
     log.info(f"‚ùå Failed keys: {failed_keys}")
     log.info(f"üìà Success rate: {summary['success_rate']}")
-    
+
     for result in results:
         status_emoji = "‚úÖ" if result["status"] == "success" else "‚ùå"
         log.info(f"{status_emoji} {result['key_name']}: {result['status'].upper()}")
         if result["error"]:
             log.info(f"   Error: {result['error']}")
-    
+
     exit_code = 0 if working_keys > 0 else (1 if total_keys == 0 else 3)
-    
+
     return {
         "status": summary["overall_status"],
         "exit_code": exit_code,
         "summary": summary,
-        "results": results
+        "results": results,
     }
 
+
 def main() -> int:
     """Main function - can run systematic test or original behavior"""
     import sys
-    
+
     # Check if systematic testing is requested
     if "--systematic" in sys.argv:
         result = test_all_keys_systematically()
         return result["exit_code"]
-    
+
     # Original behavior - stop at first working key
     keys = _gather_keys()
     if not keys:
-        log.error("‚ùå No API keys found. Add GOOGLE_API_KEY and/or GOOGLE_API_KEY_0..9 to your .env.")
+        log.error(
+            "‚ùå No API keys found. Add GOOGLE_API_KEY and/or GOOGLE_API_KEY_0..9 to your .env."
+        )
         return 1
 
     for idx, key in enumerate(keys):
@@ -295,5 +335,6 @@ def main() -> int:
     log.error("‚ùå All keys tried; none succeeded.")
     return 3
 
+
 if __name__ == "__main__":
-    sys.exit(main())
\ No newline at end of file
+    sys.exit(main())
