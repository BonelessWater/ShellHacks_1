name: Deploy Full-Stack App to Azure - AgentZero

# Only run CI/CD when specifically requested
on:
  push:
    branches: 
      - main
      - prod
  workflow_dispatch:  # Manual trigger with options
    inputs:
      action:
        description: 'What to run'
        required: true
        default: 'test-only'
        type: choice
        options:
        - 'test-only'           # Run tests + linting only (no deploy)
        - 'deploy-with-tests'   # Full CI/CD pipeline 
        - 'deploy-skip-tests'   # Deploy only (skip tests/linting)
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    runs-on: ubuntu-latest
    # Run tests if: manual action includes tests OR push with [ci] tag
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'test-only' || github.event.inputs.action == 'deploy-with-tests')) ||
      (github.event_name == 'push' && (contains(github.event.head_commit.message, '[ci]') || contains(github.event.head_commit.message, '[test]')))
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Install dependencies
        env:
          NO_NETWORK: "1"
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
          
      - name: Run tests
        run: |
          poetry run pytest -q

  lint:
    runs-on: ubuntu-latest
    needs: test
    # Run linting same conditions as tests
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'test-only' || github.event.inputs.action == 'deploy-with-tests')) ||
        (github.event_name == 'push' && (contains(github.event.head_commit.message, '[ci]') || contains(github.event.head_commit.message, '[test]')))
      ) &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Install dev dependencies
        env:
          NO_NETWORK: "1"
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
          
      - name: Run flake8
        run: |
          poetry run flake8 || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint]
    # Deploy only if: manual deploy action OR push with [deploy] tag
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'deploy-with-tests' || github.event.inputs.action == 'deploy-skip-tests')) ||
        (github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy]'))
      ) &&
      (
        github.event.inputs.action == 'deploy-skip-tests' ||
        (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.lint.result == 'success' || needs.lint.result == 'skipped')
      )
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Show deployment info
        run: |
          echo "üöÄ Deploying to: ${{ github.event.inputs.environment || 'production' }}"
          echo "Action: ${{ github.event.inputs.action || 'push-deploy' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Tests result: ${{ needs.test.result }}"
          echo "Lint result: ${{ needs.lint.result }}"
          
      - uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build React frontend using Docker (not local npm)
      - name: Build React frontend with Docker
        run: |
          echo "Building React frontend using Docker..."
          
          # Build the frontend Docker image
          docker build -t frontend-build ./frontend
          
          # Create a temporary container to extract the build
          docker create --name temp-container frontend-build
          
          # Create backend directory if it doesn't exist
          mkdir -p backend/frontend_build
          
          # Extract the built files from the Docker container
          docker cp temp-container:/usr/share/nginx/html/. backend/frontend_build/
          
          # Clean up the temporary container
          docker rm temp-container
          
          # Verify the files are there
          echo "Build completed. Files in backend/frontend_build:"
          ls -la backend/frontend_build/
          
          # Check for index.html specifically
          if [ -f backend/frontend_build/index.html ]; then
            echo "‚úÖ index.html found - build successful"
          else
            echo "‚ùå index.html not found - build failed"
            exit 1
          fi

      # Login to Azure using Service Principal (more reliable)
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_88FBF5A58CF4436E8F8955E200248A41 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_7DE0416DFB4B4CB88EDDCA0CC26BC123 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_AD05817C00C745649FDAAE35BB36A645 }}

      # Deploy to Azure Web App
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Agentzero'
          slot-name: 'Production'
          package: './backend'