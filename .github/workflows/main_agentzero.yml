name: Deploy Full-Stack App to Azure - AgentZero

# Only run CI/CD when specifically requested
on:
  push:
    branches: 
      - main
      - prod
  workflow_dispatch:
    inputs:
      action:
        description: 'What to run'
        required: true
        default: 'test-only'
        type: choice
        options:
        - 'test-only'
        - 'deploy-with-tests'
        - 'deploy-skip-tests'
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'test-only' || github.event.inputs.action == 'deploy-with-tests')) ||
      (github.event_name == 'push' && (contains(github.event.head_commit.message, '[ci]') || contains(github.event.head_commit.message, '[test]')))
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock', 'backend/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry

      - name: Install Python dependencies
        env:
          NO_NETWORK: "1"
        run: |
          cd backend
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-ansi --only=main
          
      - name: Run Python tests
        run: |
          cd backend
          poetry run pytest -q

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Node.js build
        uses: actions/cache@v3
        with:
          path: |
            frontend/node_modules
            frontend/build
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Node.js dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
          
      - name: Run Node.js tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

  lint:
    runs-on: ubuntu-latest
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'test-only' || github.event.inputs.action == 'deploy-with-tests')) ||
        (github.event_name == 'push' && (contains(github.event.head_commit.message, '[ci]') || contains(github.event.head_commit.message, '[test]')))
      )
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Install Python dev dependencies
        env:
          NO_NETWORK: "1"
        run: |
          cd backend
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
          
      - name: Run Python linting
        run: |
          cd backend
          poetry run flake8 || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'deploy-with-tests' || github.event.inputs.action == 'deploy-skip-tests')) ||
        (github.event_name == 'push' && contains(github.event.head_commit.message, '[deploy]'))
      ) &&
      (
        github.event.inputs.action == 'deploy-skip-tests' ||
        (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.lint.result == 'success' || needs.lint.result == 'skipped')
      )
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Show deployment info
        run: |
          echo "🚀 Deploying to: ${{ github.event.inputs.environment || 'production' }}"
          echo "Action: ${{ github.event.inputs.action || 'push-deploy' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Tests result: ${{ needs.test.result }}"
          echo "Lint result: ${{ needs.lint.result }}"
          
      - uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache React build
        uses: actions/cache@v3
        with:
          path: |
            frontend/node_modules
            frontend/build
          key: ${{ runner.os }}-react-build-${{ hashFiles('frontend/package-lock.json', 'frontend/src/**') }}
          restore-keys: |
            ${{ runner.os }}-react-build-
            ${{ runner.os }}-node-

      # Build React app
      - name: Build React frontend
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit
          npm run build
          echo "✅ React build completed"
          ls -la build/

      # Create optimized deployment package
      - name: Create deployment package
        run: |
          echo "📦 Creating optimized deployment package..."

          # Create deployment directory
          mkdir -p deploy

          # Copy only production files for frontend
          cp frontend/package.json frontend/package-lock.json deploy/
          cp frontend/server.js deploy/
          cp -r frontend/build deploy/

          # Copy only production files for backend
          mkdir -p deploy/api
          cp backend/requirements.txt deploy/api/
          cp backend/main.py deploy/api/ || cp backend/*.py deploy/api/
          find backend -name "*.py" -not -path "*/test*" -not -path "*/__pycache__/*" -exec cp {} deploy/api/ \;
          
          # Create startup script for Azure
          cat > deploy/startup.sh << 'EOF'
          #!/bin/bash
          echo "🚀 Starting AgentZero with Node.js primary on port 3000"
          
          # Install only production Node.js dependencies
          echo "📦 Installing Node.js dependencies..."
          npm ci --only=production --no-audit --prefer-offline
          
          # Start FastAPI backend on port 8000 in background
          echo "🐍 Starting FastAPI backend on port 8000..."
          cd api
          pip install -r requirements.txt
          python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
          cd ..
          
          # Start Node.js server on port 3000 (primary)
          echo "🟢 Starting Node.js server on port 3000..."
          export REACT_APP_API_URL=http://localhost:8000
          export PORT=3000
          node server.js
          EOF
          
          chmod +x deploy/startup.sh
          
          # Verify deployment structure
          echo "📋 Deployment structure:"
          find deploy -type f -name "*.js" -o -name "*.py" -o -name "*.json" -o -name "*.sh" | head -20

      # Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_88FBF5A58CF4436E8F8955E200248A41 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_7DE0416DFB4B4CB88EDDCA0CC26BC123 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_AD05817C00C745649FDAAE35BB36A645 }}

      # Deploy to Azure Web App with optimizations
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'Agentzero'
          slot-name: 'Production'
          package: './deploy'
          clean: true
          restart: true