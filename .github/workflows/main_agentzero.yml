name: Deploy Full-Stack App to Azure - AgentZero

# Deploy on every push to main and prod branches
on:
  push:
    branches: 
      - main
      - prod
  workflow_dispatch:  # Keep manual option as backup
    inputs:
      skip_tests:
        description: 'Skip tests and linting'
        required: false
        default: false
        type: boolean
      run_tests:
        description: 'Run tests before deploy'
        required: false
        default: true
        type: boolean
      run_linting:
        description: 'Run linting before deploy'
        required: false
        default: true
        type: boolean

jobs:
  test:
    runs-on: ubuntu-latest
    # Skip if manually disabled OR commit message contains [skip-tests]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.run_tests == 'true' && github.event.inputs.skip_tests == 'false') ||
      (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip-tests]') && !contains(github.event.head_commit.message, '[skip-ci]'))
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Install dependencies
        env:
          NO_NETWORK: "1"
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
          
      - name: Run tests
        run: |
          poetry run pytest -q

  lint:
    runs-on: ubuntu-latest
    needs: test
    # Skip if manually disabled OR commit message contains [skip-lint] or [skip-tests]
    if: |
      always() && 
      (
        (github.event_name == 'workflow_dispatch' && github.event.inputs.run_linting == 'true' && github.event.inputs.skip_tests == 'false') ||
        (github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip-lint]') && !contains(github.event.head_commit.message, '[skip-tests]') && !contains(github.event.head_commit.message, '[skip-ci]'))
      ) &&
      (needs.test.result == 'success' || needs.test.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          
      - name: Install dev dependencies
        env:
          NO_NETWORK: "1"
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi
          
      - name: Run flake8
        run: |
          poetry run flake8 || true

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint]  # Wait for both jobs but they can be skipped
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.lint.result == 'success' || needs.lint.result == 'skipped')
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Show deployment info
        run: |
          echo "üöÄ Auto-deploying from branch: ${{ github.ref_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Commit: ${{ github.sha }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Tests result: ${{ needs.test.result }}"
          echo "Lint result: ${{ needs.lint.result }}"
          
      - uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build React frontend using Docker (not local npm)
      - name: Build React frontend with Docker
        run: |
          echo "Building React frontend using Docker..."
          
          # Build the frontend Docker image
          docker build -t frontend-build ./frontend
          
          # Create a temporary container to extract the build
          docker create --name temp-container frontend-build
          
          # Create backend directory if it doesn't exist
          mkdir -p backend/frontend_build
          
          # Extract the built files from the Docker container
          docker cp temp-container:/usr/share/nginx/html/. backend/frontend_build/
          
          # Clean up the temporary container
          docker rm temp-container
          
          # Verify the files are there
          echo "Build completed. Files in backend/frontend_build:"
          ls -la backend/frontend_build/
          
          # Check for index.html specifically
          if [ -f backend/frontend_build/index.html ]; then
            echo "‚úÖ index.html found - build successful"
          else
            echo "‚ùå index.html not found - build failed"
            exit 1
          fi

      # Login to Azure using Service Principal (more reliable)
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy to Azure Web App
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'AgentZero'
          slot-name: 'Production'
          package: './backend'